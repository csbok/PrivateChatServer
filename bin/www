#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatserver:server');
var http = require('http');
var jwt = require('jsonwebtoken');
var config = require("../config/config.json");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// ORM Sync
var models = require("../models");

models.sequelize.sync().then(function () {
});

// Socket IO Setting
var socket = require('socket.io').listen(server);
socket.on('connection', function(connection) {

  models.Message.findAll({include: {model:models.User, attributes: ['id','Nickname']}}).then(function (messages) {
    var messageLength = messages.length;
    console.log(JSON.stringify(messages));
    for (var i = 0; i < messageLength; i++) {
        socket.emit('message', {userId:messages[i].User.id, nickname:messages[i].User.Nickname, msg:messages[i].Message});
    }

  });
    console.log('User Connected');
    connection.on('message', function(data){
        jwt.verify(data.jwt, config.jwtSecret, function(err, decoded) {
            if (err) {
                console.log('socket.io jwt error : ' + err);
                return;
            }

            models.Message.create({Message: data.msg, UserId: decoded.id});
            socket.emit('message', {userId:decoded.id, nickname:decoded.nickname, msg:data.msg});

        });
    });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
